# Your App's Dockerfile (e.g., Dockerfile.jvm)
#
# Stage 1: Build Stockfish in a UBI-compatible environment
FROM --platform=$BUILDPLATFORM registry.access.redhat.com/ubi9/ubi-minimal:latest AS builder

ARG TARGETPLATFORM
# Install build tools for UBI (using microdnf)
RUN microdnf update -y && \
    microdnf install -y git make gcc-c++ wget ca-certificates && \
    microdnf install -y ninja-build meson clang && \
    microdnf clean all

WORKDIR /opt
RUN git clone --depth 1 --branch sf_17.1 \
      https://github.com/official-stockfish/Stockfish.git

WORKDIR /opt/Stockfish/src
# Compile Stockfish using the UBI's g++
# Detect architecture and build appropriate version
RUN if [ "$(uname -m)" = "arm64" ] || [ "$(uname -m)" = "aarch64" ]; then \
        make build ARCH=armv8; \
    else \
        make build ARCH=x86-64-modern; \
    fi

# lc0
RUN git clone -b release/0.31 --recurse-submodules \
        https://github.com/LeelaChessZero/lc0.git /lc0
WORKDIR /lc0

RUN ./build.sh && \
    strip build/release/lc0

# Stage 2: Build your Quarkus application and include Stockfish
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

USER root
RUN microdnf update -y && \
    microdnf install -y expect zlib libstdc++ libatomic && \
    microdnf clean all

# Ensure the unversioned libz.so symlink exists
RUN ln -s /usr/lib64/libz.so.1 /usr/lib64/libz.so

# Run ldconfig to update the dynamic linker cache (good practice after adding symlinks)
RUN ldconfig

ENV LD_LIBRARY_PATH=/usr/lib64:${LD_LIBRARY_PATH}

# Copy Stockfish from the builder stage
COPY --from=builder /opt/Stockfish/src/stockfish /usr/local/bin/stockfish
# Copy CA bundle for NNUE if needed
COPY --from=builder /etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/ca-bundle.crt

# copy lc0
COPY --from=builder /lc0/build/release/lc0 /usr/local/bin/lc0

# download the maia weights
RUN mkdir /maia && \
    for i in {1100..1900..100}; do curl -L -o /maia/maia-${i}.pb.gz "https://github.com/CSSLab/maia-chess/releases/download/v1.0/maia-${i}.pb.gz"; done

# --- Your existing Quarkus app layers ---
ENV LANGUAGE='en_US:en'
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

ENTRYPOINT [ "/opt/jboss/container/java/run/run-java.sh" ]
