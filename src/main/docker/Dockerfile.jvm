# Your App's Dockerfile (e.g., Dockerfile.jvm)
#
# Stage 1: Build Stockfish in a UBI-compatible environment
FROM --platform=$BUILDPLATFORM registry.access.redhat.com/ubi9/ubi-minimal:latest AS stockfish_builder

ARG TARGETPLATFORM
# Install build tools for UBI (using microdnf)
RUN microdnf update -y && \
    microdnf install -y git make gcc-c++ wget ca-certificates && \
    microdnf clean all

WORKDIR /opt
RUN git clone --depth 1 --branch sf_17.1 \
      https://github.com/official-stockfish/Stockfish.git

WORKDIR /opt/Stockfish/src
# Compile Stockfish using the UBI's g++
# Detect architecture and build appropriate version
RUN if [ "$(uname -m)" = "arm64" ] || [ "$(uname -m)" = "aarch64" ]; then \
        make build ARCH=armv8; \
    else \
        make build ARCH=x86-64-modern; \
    fi

# Stage 2: Build your Quarkus application and include Stockfish
FROM registry.access.redhat.com/ubi9/openjdk-21:1.21

USER root
RUN microdnf update -y && \
    microdnf install -y expect && \
    microdnf clean all


# Copy Stockfish from the builder stage
COPY --from=stockfish_builder /opt/Stockfish/src/stockfish /usr/local/bin/stockfish
# Copy CA bundle for NNUE if needed
COPY --from=stockfish_builder /etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/ca-bundle.crt

# --- Your existing Quarkus app layers ---
ENV LANGUAGE='en_US:en'
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

ENTRYPOINT [ "/opt/jboss/container/java/run/run-java.sh" ]
